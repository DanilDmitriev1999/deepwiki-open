#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å vLLM.
–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
"""

import os
import sys
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ API
sys.path.append('./api')

def test_vllm_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å vLLM —Å–µ—Ä–≤–µ—Ä–æ–º."""
    try:
        from api.openai_client import OpenAIClient
        from adalflow.core.types import ModelType
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å vLLM —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é
        client = OpenAIClient(
            vllm_compatible=True,
            force_streaming=False
        )
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        test_kwargs = {
            "model": "mistral-24B",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏
            "messages": [
                {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"}
            ],
            "temperature": 0.7,
            "max_tokens": 100
        }
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç
        api_kwargs = client.convert_inputs_to_api_kwargs(
            input="–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
            model_kwargs=test_kwargs,
            model_type=ModelType.LLM
        )
        
        logger.info("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        for key, value in api_kwargs.items():
            if key == "messages":
                logger.info(f"  {key}: {len(value)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            else:
                logger.info(f"  {key}: {value}")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–æ–≤–∞
        logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ vLLM...")
        response = client.call(api_kwargs=api_kwargs, model_type=ModelType.LLM)
        
        logger.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç vLLM!")
        logger.info(f"–¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(response)}")
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        parsed_response = client.parse_chat_completion(response)
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {parsed_response.raw_response}")
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ vLLM: {str(e)}")
        logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        return False

def test_simple_request():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π HTTP –∑–∞–ø—Ä–æ—Å –∫ vLLM."""
    try:
        import requests
        
        url = "http://10.138.16.219:8666/v1/chat/completions"
        headers = {
            "Content-Type": "application/json",
            "Authorization": "Bearer dummy-key"  # vLLM –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á
        }
        
        data = {
            "model": "mistral-24B",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏
            "messages": [
                {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç!"}
            ],
            "temperature": 0.7,
            "max_tokens": 50
        }
        
        logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ–π HTTP –∑–∞–ø—Ä–æ—Å –∫ vLLM...")
        response = requests.post(url, json=data, headers=headers, timeout=30)
        
        logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        logger.info(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {dict(response.headers)}")
        
        if response.status_code == 200:
            logger.info("–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç vLLM!")
            result = response.json()
            logger.info(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {result}")
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—Ä–æ—Å–µ: {str(e)}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logger.info("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è vLLM...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        logger.warning("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á.")
        os.environ["OPENAI_API_KEY"] = "dummy-key"
    
    logger.info("=== –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π HTTP –∑–∞–ø—Ä–æ—Å ===")
    test1_result = test_simple_request()
    
    logger.info("=== –¢–µ—Å—Ç 2: –ß–µ—Ä–µ–∑ OpenAIClient ===")
    test2_result = test_vllm_connection()
    
    logger.info("=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===")
    logger.info(f"–ü—Ä—è–º–æ–π HTTP –∑–∞–ø—Ä–æ—Å: {'‚úì –ü–†–û–®–ï–õ' if test1_result else '‚úó –ù–ï –ü–†–û–®–ï–õ'}")
    logger.info(f"–ß–µ—Ä–µ–∑ OpenAIClient: {'‚úì –ü–†–û–®–ï–õ' if test2_result else '‚úó –ù–ï –ü–†–û–®–ï–õ'}")
    
    if test1_result and test2_result:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        logger.error("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é vLLM.")
        return 1

if __name__ == "__main__":
    exit(main()) 